@*
    Copyright (c) Microsoft Corporation.  All rights reserved.
    MIT License
    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*@
@using HealthVaultProviderManagementPortal.Models.Enums
@using HealthVaultProviderManagementPortal.Models.Patient
@model TimelineViewModel
@{
    ViewBag.Title = "Patient preview";
    DateTime date = DateTime.MinValue;
}
<h1 class="page-title">@ViewBag.Title</h1>
@using (Html.BeginForm("Index", "Patient", FormMethod.Get))
{
    @Html.Hidden("personId", Request.Params["personId"])
    @Html.Hidden("recordId", Request.Params["recordId"])

    <div class="form-horizontal">
        <div class="form-group">
            <div class="col-md-5 slim-col">
                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-5 slim-col">
                @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col-md-2 slim-col">
                <input type="submit" value="Get" class="btn btn-default btn-inline" />
            </div>
        </div>
    </div>
}
@if (Model?.TimelineEntryGroups != null && Model.TimelineEntryGroups.Any())
{
    <h3>Timeline</h3>

    foreach (var group in Model.TimelineEntryGroups)
    {
        <h4>@group.Key</h4>

        <table class="table table-striped">
            <tbody>
                @foreach (var entry in group)
                {
                    <tr>
                        <td class="ms-thumbnail col-md-1"><img class="img-thumbnail" src="@entry.TaskImageUrl" alt="Task thumbnail icon" /></td>
                        <td class="col-md-9 @(entry.ScheduleType == TimelineScheduleType.Unscheduled ? "occurrence" : "")">
                            @if (entry.ScheduleType == TimelineScheduleType.Unscheduled)
                            {
                                @entry.TaskName
                            }
                            else
                            {
                                @Html.ActionLink(entry.TaskName, "TaskOccurrence", new {taskId = entry.TaskId, startDate = Model.StartDate, endDate = Model.EndDate, personId = Request.Params["personId"], recordId = Request.Params["recordId"]})
                            }
                            <br/>@TaskTime(entry)
                        </td>
                        <td class="col-md-2">
                            @if (entry.ScheduleType != TimelineScheduleType.Unscheduled)
                            {
                                if (entry.CompletionMetrics.CompletionType == ActionPlanTaskCompletionType.Scheduled && entry.InWindowOccurrenceCount > 0)
                                {
                                    @:Done!
                                }
                                else if (entry.CompletionMetrics.CompletionType == ActionPlanTaskCompletionType.Frequency)
                                {
                                    @Html.Raw($"{entry.InWindowOccurrenceCount}/{entry.CompletionMetrics.RequiredNumberOfOccurrences.Value}<br/>{entry.CompletionMetrics.RecurrenceType}")
                                }
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
@helper TaskTime(TimelineEntryViewModel task)
{
switch (task.ScheduleType)
{
    case TimelineScheduleType.Anytime:
            @TimelineScheduleType.Anytime.ToString()
        break;
    case TimelineScheduleType.Unscheduled:
            @:Logged at: @task.LocalDateTime.TimeOfDay.ToString()
            break;
        default:
            @task.LocalDateTime.TimeOfDay.ToString();
            break;
    }
}